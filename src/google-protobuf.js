/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.elrond_proto.Transaction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.elrond_proto.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.elrond_proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.elrond_proto.Transaction.displayName = 'proto.elrond_proto.Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.elrond_proto.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.elrond_proto.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.elrond_proto.Transaction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.elrond_proto.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce(),
    value: msg.getValue_asB64(),
    rcvaddr: msg.getRcvaddr_asB64(),
    sndaddr: msg.getSndaddr_asB64(),
    gasprice: msg.getGasprice(),
    gaslimit: msg.getGaslimit(),
    data: msg.getData(),
    chainID: msg.getChainId_asB64(),
    version: msg.getVersion(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.elrond_proto.Transaction}
 */
proto.elrond_proto.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.elrond_proto.Transaction;
  return proto.elrond_proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.elrond_proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.elrond_proto.Transaction}
 */

// message Transaction {
//   uint64   Nonce       = 1  [(gogoproto.jsontag) = "nonce"];
//   bytes    Value       = 2  [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
//   bytes    RcvAddr     = 3  [(gogoproto.jsontag) = "receiver"];
//   bytes    RcvUserName = 4  [(gogoproto.jsontag) = "rcvUserName,omitempty"];
//   bytes    SndAddr     = 5  [(gogoproto.jsontag) = "sender"];
//   bytes    SndUserName = 6  [(gogoproto.jsontag) = "sndUserName,omitempty"];
//   uint64   GasPrice    = 7  [(gogoproto.jsontag) = "gasPrice,omitempty"];
//   uint64   GasLimit    = 8  [(gogoproto.jsontag) = "gasLimit,omitempty"];
//   bytes    Data        = 9  [(gogoproto.jsontag) = "data,omitempty"];
//   bytes    ChainID     = 10 [(gogoproto.jsontag) = "chainID"];
//   uint32   Version     = 11 [(gogoproto.jsontag) = "version"];
//   bytes    Signature   = 12 [(gogoproto.jsontag) = "signature,omitempty"];
// }

proto.elrond_proto.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRcvaddr(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSndaddr(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGaslimit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.elrond_proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.elrond_proto.Transaction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.elrond_proto.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */

proto.elrond_proto.Transaction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getRcvaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getSndaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getGasprice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = this.getGaslimit();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = this.getData();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.elrond_proto.Transaction} The clone.
 */
proto.elrond_proto.Transaction.prototype.cloneMessage = function() {
  return /** @type {!proto.elrond_proto.Transaction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Nonce = 1;
 * @return {number}
 */
proto.elrond_proto.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.elrond_proto.Transaction.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.elrond_proto.Transaction.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes Value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.elrond_proto.Transaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes Value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.elrond_proto.Transaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.elrond_proto.Transaction.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes RcvAddr = 3;
 * @return {!(string|Uint8Array)}
 */
proto.elrond_proto.Transaction.prototype.getRcvaddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes RcvAddr = 3;
 * This is a type-conversion wrapper around `getRcvaddr()`
 * @return {string}
 */
proto.elrond_proto.Transaction.prototype.getRcvaddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRcvaddr()));
};


/**
 * optional bytes RcvAddr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRcvaddr()`
 * @return {!Uint8Array}
 */
proto.elrond_proto.Transaction.prototype.getRcvaddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRcvaddr()));
};


/** @param {!(string|Uint8Array)} value  */
proto.elrond_proto.Transaction.prototype.setRcvaddr = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes SndAddr = 4;
 * @return {!(string|Uint8Array)}
 */
proto.elrond_proto.Transaction.prototype.getSndaddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes SndAddr = 4;
 * This is a type-conversion wrapper around `getSndaddr()`
 * @return {string}
 */
proto.elrond_proto.Transaction.prototype.getSndaddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSndaddr()));
};


/**
 * optional bytes SndAddr = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSndaddr()`
 * @return {!Uint8Array}
 */
proto.elrond_proto.Transaction.prototype.getSndaddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSndaddr()));
};


/** @param {!(string|Uint8Array)} value  */
proto.elrond_proto.Transaction.prototype.setSndaddr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint64 GasPrice = 5;
 * @return {number}
 */
proto.elrond_proto.Transaction.prototype.getGasprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.elrond_proto.Transaction.prototype.setGasprice = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 GasLimit = 6;
 * @return {number}
 */
proto.elrond_proto.Transaction.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.elrond_proto.Transaction.prototype.setGaslimit = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string Data = 7;
 * @return {string}
 */
proto.elrond_proto.Transaction.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.elrond_proto.Transaction.prototype.setData = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes Signature = 8;
 * @return {!(string|Uint8Array)}
 */
proto.elrond_proto.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


proto.elrond_proto.Transaction.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes Signature = 8;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.elrond_proto.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};

proto.elrond_proto.Transaction.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};

/**
 * optional bytes Signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.elrond_proto.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.elrond_proto.Transaction.prototype.setChainId = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.elrond_proto.Transaction.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.elrond_proto.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 12, value);
};
/**
 * optional uint64 GasLimit = 6;
 * @return {number}
 */
proto.elrond_proto.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.elrond_proto.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 11, value);
};

goog.object.extend(exports, proto.elrond_proto);